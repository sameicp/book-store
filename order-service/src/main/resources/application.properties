spring.application.name=order-service
server.port=8082
server.shutdown=graceful
management.endpoints.web.exposure.include=*
management.info.git.mode=full

# Order Service Config
orders.catalog-service-url=http://localhost:8081
orders.order-events-exchange=orders-exchange
orders.new-orders-queue=new-orders
orders.delivered-orders-queue=delivered-orders
orders.cancelled-orders-queue=cancelled-orders
orders.error-orders-queue=error-orders

orders.publish-order-events-job-cron=*/15 * * * * *
orders.new-orders-job-cron=*/20 * * * * *

#### Docker Service Configuration

# Database Config
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:3002/orders}
spring.datasource.username=${DB_USERNAME:same}
spring.datasource.password=${DB_PASSWORD:same}
spring.jpa.open-in-view=false
spring.jpa.show-sql=true

# RabbitMQ Config
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_HOST:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:same}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:same}

# Resilience4j Config
resilience4j.retry.backends.catalog-service.max-attempts=2
resilience4j.retry.backends.catalog-service.wait-duration=1s

resilience4j.circuitbreaker.backends.catalog-service.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.backends.catalog-service.sliding-window-size=6
resilience4j.circuitbreaker.backends.catalog-service.minimum-number-of-calls=4
resilience4j.circuitbreaker.backends.catalog-service.wait-duration-in-open-state=20s
resilience4j.circuitbreaker.backends.catalog-service.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.backends.catalog-service.failure-rate-threshold=50
